#!/usr/bin/env python

import os
import json
import time
import sys
import signal

ports_file = os.environ['HOME'] + '/.portsforwarding.json'
forwarding_cmd_template = 'ssh -L {}:localhost:{} -Nf {}'


def signal_handler(signal, frame):
    stop_forwarding_for_all_ports()
    sys.exit(0)


signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


def get_config():
    with open(ports_file, 'r') as f:
        return json.load(f)


def start_forwarding(remote_host, local_port, remote_port):
    os.system(forwarding_cmd_template.format(local_port, remote_port, remote_host))


def start_forwarding_for_all_ports():
    config = get_config()
    remote_host = config['remote-host']
    port_mappings = config['port-mappings']

    for port_mapping in port_mappings:
        local_port = port_mapping['local']
        remote_port = port_mapping['remote']

        if not check_port(local_port):
            stop_forwarding(remote_host, local_port, remote_port)
            start_forwarding(remote_host, local_port, remote_port)
            print(
                'Port forwarding enabled for http://localhost:{} => {}:{}'.format(local_port, remote_host, remote_port)
            )


def stop_forwarding_for_all_ports():
    config = get_config()
    remote_host = config['remote-host']
    port_mappings = config['port-mappings']

    for (port_mapping) in port_mappings:
        local_port = port_mapping['local']
        remote_port = port_mapping['remote']
        stop_forwarding(remote_host, local_port, remote_port)


def stop_forwarding(remote_host, local_port, remote_port):
    os.system('pkill -f \'{}\''.format(forwarding_cmd_template.format(local_port, remote_port, remote_host)))


def check_port(port):
    return os.system('wget -q --spide --timeout=10 localhost:{}'.format(port)) == 0


def main():
    while True:
        start_forwarding_for_all_ports()
        time.sleep(10)


if __name__ == "__main__":
    main()
